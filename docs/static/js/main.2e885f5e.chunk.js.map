{"version":3,"sources":["reportWebVitals.ts","components/AddCategory.tsx","components/GiftGridItem.tsx","helpers/getGifts.tsx","components/GiftGrid.tsx","hooks/useFetchGifs.tsx","GiftExpertApp.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","className","GiftGridItem","title","url","src","alt","getGifts","a","category","encodeURI","fetch","resp","json","data","map","img","id","images","downsized_medium","GiftGrid","loading","setImages","useEffect","imgs","useFetchGifs","imagePass","GiftExpertApp","categories","cat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAceA,G,kBAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCHDQ,EAAc,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAuBA,OACI,sBAAMC,OAAO,GACPC,SAbW,SAACC,GAClBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAS,GACvBT,IACAA,GAAc,SAACU,GAAD,OAAqBR,GAArB,mBAAoCQ,OAClDP,EAAc,MAMtB,SAEI,uBAAOQ,KAAK,OACLC,MAAOV,EACPW,SApBW,SAACP,GACvBH,EAAcG,EAAEQ,OAAOF,QAoBZG,UAAW,oCChCjBC,EAAe,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,IAEjC,OACI,qBAAKH,UAAW,MAAhB,SACI,sBAAKA,UAAW,mDAAhB,UACI,qBAAKA,UAAW,YAAaI,IAAKD,EAAKE,IAAI,KAC3C,mBAAGL,UAAW,cAAd,SAA8BE,U,uBCGjCI,EAAQ,uCAAG,qCAAAC,EAAA,6DAAQC,EAAR,EAAQA,SAEtBL,EAFc,iDAEkCM,UAAUD,GAF5C,+DAGDE,MAAMP,GAHL,cAGdQ,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAJa,kBAMbA,EAAKC,KAAI,SAACC,GAAmB,IAAD,EAC/B,MAAO,CACHC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MACXC,IAAG,UAAEY,EAAIE,cAAN,aAAE,EAAYC,iBAAiBf,SAVtB,4CAAH,sDCVRgB,EAAW,SAAC,GAAuB,IAAtBX,EAAqB,EAArBA,SAEtB,ECHwB,SAAC,GAAuB,IAAtBA,EAAqB,EAArBA,SAC1B,EAA4BtB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAFb,mBAAOH,EAAP,KAAeI,EAAf,KAaA,OARAC,qBAAU,WACNhB,EAAS,CAACE,aACL9B,MAAK,SAAA6C,GAAI,OAAIF,EAAU,CACpBR,KAAMU,EACNH,SAAS,SAElB,CAACZ,IAEGS,EDXwBO,CAAa,CAAChB,aAAjCS,EAAZ,EAAOJ,KAEDY,GAFN,EAAoBL,QAEFH,EAAOH,KAAI,gBAAEE,EAAF,EAAEA,GAAId,EAAN,EAAMA,MAAOC,EAAb,EAAaA,IAAb,OACzB,cAAC,EAAD,CAAuBD,MAAOA,EAAOC,IAAKA,GAAvBa,OAGvB,OACI,qCACI,6BAAKR,IACL,qBAAKR,UAAW,4BAAhB,SAEQyB,QEbPC,EAAgB,WAEzB,MAAoCxC,mBAAmB,CAAC,cAAxD,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEM2C,EAAMD,EAAWb,KAAI,SAACN,GACxB,OAAO,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,MAG1B,OACI,qCACI,+CACA,cAAC,EAAD,CAAavB,cAAeA,IAC5B,uBAEA,6BAEQ2C,QCZpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.2e885f5e.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react'\n\ntype props = {\n    setCategories?: React.Dispatch<React.SetStateAction<string[]>>\n}\n\nexport const AddCategory = ({setCategories }: props) => {\n\n    const [inputValue, setInputValue] = useState('')\n    // const handleAdd = () => {\n    //     setCategories([\n    //         ...categories,\n    //         'Naruto'\n    //     ])\n    // }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (inputValue.trim().length > 2) {\n            if (setCategories) {\n                setCategories((cats: string[]) => [inputValue, ...cats])\n                setInputValue('')\n            }\n        }\n    }\n\n    return (\n        <form action=\"\"\n              onSubmit={handleSubmit}>\n            <input type=\"text\"\n                   value={inputValue}\n                   onChange={handleInputChange}\n                   className={'form-control form-control-sm'}/>\n        </form>\n    )\n}\n","type props = {\n    title: string,\n    url: string\n}\n\nexport const GiftGridItem = ({title, url}: props) => {\n\n    return (\n        <div className={'p-1'}>\n            <div className={'card card-size animate__animated animate__fadeIn'}>\n                <img className={'card-body'} src={url} alt=\"\"/>\n                <p className={'card-footer'}>{title}</p>\n            </div>\n        </div>\n    )\n}\n","type props = {\n    category: string\n}\n\ntype response = {\n    id: string,\n    title: string,\n    images: {\n        downsized_medium: {\n            url: string\n        }\n    }\n}\n\nexport const getGifts = async ({category}: props) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=IPsmwEaofK3zRuEaKEn0FAAm6eUEMvdG`\n    const resp = await fetch(url)\n    const {data} = await resp.json()\n\n    return data.map((img: response) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n}\n","import {GiftGridItem} from './GiftGridItem'\n\nimport {useFetchGifs} from '../hooks/useFetchGifs'\n\nexport const GiftGrid = ({category}: props) => {\n\n    const {data:images, loading} = useFetchGifs({category})\n\n    const imagePass = images.map(({id, title, url}) => (\n        <GiftGridItem key={id} title={title} url={url}/>\n    ))\n\n    return (\n        <>\n            <h3>{category}</h3>\n            <div className={'d-flex flex-row flex-wrap'}>\n                {\n                    imagePass\n                }\n            </div>\n        </>\n    )\n}\n\ntype props = {\n    category: string\n}\n\n","import {useEffect, useState} from 'react'\nimport {getGifts} from '../helpers/getGifts'\n\nexport const useFetchGifs = ({category}: props) => {\n    const [images, setImages] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifts({category})\n            .then(imgs => setImages({\n                data: imgs,\n                loading: false\n            }))\n    }, [category])\n\n    return images\n}\n\ntype props = {\n    category: string\n}\n","import {useState} from 'react'\nimport {AddCategory} from './components/AddCategory'\nimport {GiftGrid} from './components/GiftGrid'\n\nexport const GiftExpertApp = () => {\n\n    const [categories, setCategories] = useState<string[]>(['One Punch'])\n\n    const cat = categories.map((category) => {\n        return <GiftGrid key={category} category={category}/>\n    })\n\n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    cat\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'animate.css/animate.min.css'\nimport reportWebVitals from './reportWebVitals';\nimport {GiftExpertApp} from './GiftExpertApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiftExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}